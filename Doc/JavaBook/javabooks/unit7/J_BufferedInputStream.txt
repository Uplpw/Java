1234567890qwertyuioplkjhgfdsaxzcvbsakjdksajhfakjdshfjakdshfoiehwiohwefjwecndsbieobcfwecwsdba;dsihadbnds;bfabfcab
#include<stdio.h>
#include<stdlib.h>
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 1
typedef int Status;

typedef struct poly
{
    int c;
    int e;
    struct poly *next;
}Pnode,*Plinklist;
Plinklist L0;

Plinklist init()
{
    Plinklist L;
    L=(Pnode *)malloc(sizeof(Pnode));
    if(!L) 
    {
        printf("无法建立链表!");
        exit(0);
    }
    L->c=0;
    L->next=NULL;
    return L;
}

Plinklist creat()
{
    int n,cof,exp;
    Pnode *L,*s,*p;
    L=init();
    printf("输入多项式项数：");
    scanf("%d",&n);
    L->c=n;
    p=L;
    printf("请输入系数 指数：\n");
    while(n--)
    {
        scanf("%d%d",&cof,&exp);
        s=(Pnode *)malloc(sizeof(Pnode));
        if(!s) exit(0);
        s->c=cof;
        s->e=exp;
        s->next=NULL;
        p->next=s;
        p=s;
    }
    printf("\n\n");
    return L;
}
    
void print(Plinklist L)
{
    int cof,exp,leap=1;
    Pnode *s,*p;
    p=L->next;
    printf("多项式是：\n");
    while(p) 
    {
        cof=p->c;
        exp=p->e;
        if(leap==1)
        {
            if(exp==0)
            printf("%d",cof);
            else
                 if(exp==1)
                 printf("%dx",cof);
                 else
                 printf("%dx^%d",cof,exp);
            leap++;
            p=p->next;
            continue;
        }
        if(exp)
        {
            if(cof>0)
            {
                if(exp==1)
                 printf("+%dx",cof);
                 else
                 printf("+%dx^%d",cof,exp);
            }
            else
            {
                if(exp==1)
                 printf("%dx",cof);
                 else
                 printf("%dx^%d",cof,exp);
            }
        }
        p=p->next;
    }
    printf("\n\n");
}

Plinklist add()
{
    int cof,exp1,exp2;
    Plinklist L1,L2;
    Pnode *p,*p1,*p2,*tp;
    printf("请输入第一个多项式：");
    L1=init();
    L1=creat();
    printf("请输入第二个多项式：");
    L2=init();
    L2=creat();
    p1=L1->next;
    p2=L2->next;
    p=L1;
    while(p1 && p2)
    {
        exp1=p1->e;
        exp2=p2->e;
        if(exp1<exp2)
        {
            p->next=p1;
            p=p1;
            p1=p1->next;
        }
        else 
            if(exp2<exp1)
            {
                 p->next=p2;
                 p=p2;
                 p2=p2->next;  
            }
            else
            {
                cof=p1->c+p2->c;
                if(cof)
                {
                    p1->c=cof;
                    p->next=p1;
                    p=p1;
                    p1=p1->next;
                    tp=p2;
                    p2=p2->next; 
                    free(tp);
                }
                else
                {
                    tp=p1; 
                    p1=p1->next;
                    free(tp);
                    tp=p2;
                    p2=p2->next; 
                    free(tp);
                }
            }
    }
    while(p1)
    {
        p->next=p1;
        p1=p1->next;
    }
    while(p2)
    {
        p->next=p2;
        p2=p2->next;
    }
    free(L2);
    return L1;
}

Plinklist sub()
{
    int cof,exp1,exp2;
    Plinklist L1,L2;
    Pnode *p,*p1,*p2,*tp;
    printf("请输入第一个多项式：");
    L1=init();
    L1=creat();
    printf("请输入第二个多项式：");
    L2=init();
    L2=creat();
    p1=L1->next;
    p2=L2->next;
    p=L1;
    while(p1 && p2)
    {
        exp1=p1->e;
        exp2=p2->e;
        if(exp1<exp2)
        {
            p->next=p1;
            p=p1;
            p1=p1->next;
        }
        else 
            if(exp2<exp1)
            {
                 p->next=p2;
                 p->c=-(p->c);
                 p=p2;
                 p2=p2->next;  
            } 
            else
            {
                cof=p1->c-p2->c;
                if(cof)
                {
                    p1->c=cof;
                    p->next=p1;
                    p=p1;
                    p1=p1->next;
                    tp=p2;
                    p2=p2->next; 
                    free(tp);
                }
                else
                {
                    tp=p1; 
                    p1=p1->next;
                    free(tp);
                    tp=p2;
                    p2=p2->next; 
                    free(tp);
                }
            }
    }
    while(p1)
    {
        p->next=p1;
        p1=p1->next;
    }
    while(p2)
    {
        p->next=p2;
        p2=p2->next;
    }
    free(L2);
    return L1;
}

int main()
{
    int ch;
    while(1)
    {
        printf("==========================================\n\n");
        printf("           1. 输入并建立多项式\n");
        printf("           2. 输入多项式\n");
        printf("           3. 多项式相加并输出\n");
        printf("           4. 多项式相减并输出\n");
        printf("           0. 退出\n\n");
        printf("==========================================\n\n");
        printf("请输入：");
        scanf("%d",&ch);
        switch(ch)
        {
            case 0:exit(0);
            case 1:L0=creat();
                   break;
            case 2:print(L0);
                   break;
            case 3:L0=add();
                   print(L0);
                   break;
            case 4:L0=sub();
                   print(L0);
                   break;
        }
    }
    system("pause");
    return 0;
}
                
                
    
    
    
    
    
    
    
    
    
    
    
    
    
        
